import React, { useContext, useEffect, useState } from 'react';
import { View, Text, StyleSheet, ImageBackground, Image, ScrollView, TextInput } from 'react-native';
import { BASE_URL, IMAGE_URL } from '../config';
import moment from 'moment';
import RenderHtml from 'react-native-render-html';
import { useWindowDimensions } from 'react-native';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { useNavigation } from '@react-navigation/native';
import Entypo from 'react-native-vector-icons/Entypo';
import * as Progress from 'react-native-progress';
import { t } from 'i18next';
import { Formik } from 'formik';
import * as Yup from 'yup';
import DateTimePicker from '@react-native-community/datetimepicker';
import { RFPercentage, RFValue } from "react-native-responsive-fontsize";
import axios from 'axios';
import { AuthContext } from '../context/AuthContext';


const validationSchema = Yup.object().shape({
    salutation: Yup.string()
        .required('Required'),
    academic_title: Yup.string()
        .required('Required'),
    first_name: Yup.string()
        .required(t('common:FirstNameIsRequired'))
        .min(2, t('common:FirstNameMustBeAtLeast2Characters'))
        .matches(/^[a-zA-Z]+$/, t('common:FirstNameMustBeAlphabetical')),
    last_name: Yup.string()
        .required(t('common:LastNameIsRequired'))
        .min(2, t('common:LastNameMustBeAtLeast2Characters'))
        .matches(/^[a-zA-Z]+$/, t('common:LastNameMustBeAlphabetical')),
    email: Yup.string()
        .required(t('common:EmailIsRequired'))
        .email(t('common:EmailIsInvalid')),
    identification_number: Yup.string()
        .required(t('common:IdentificationNumberIsRequired'))
        .min(2, t('common:IdentificationNumberMustBeAtLeast2Characters'))
        .matches(/^[0-9]+$/, t('common:IdentificationNumberMustBeNumeric')),
    country_of_birth: Yup.string()
        .required(t('common:BirthPlaceIsRequired'))
        .min(2, t('common:BirthPlaceMustBeAtLeast2Characters')),
    mother_tongue: Yup.string()
        .required(t('common:MotherTongueIsRequired'))
        .min(2, t('common:MotherTongueMustBeAtLeast2Characters')),
    telephone: Yup.string()
        .required(t('common:PhoneIsRequired'))
        .min(9, t('common:PhoneMustBeAtLeast9Characters'))
        .max(15, t('common:PhoneMustBeAtMost15Characters'))
        .matches(/^[0-9]+$/, t('common:PhoneMustBeNumeric')),
    phone: Yup.string()
        .required(t('common:PhoneIsRequired'))
        .min(9, t('common:PhoneMustBeAtLeast9Characters'))
        .max(15, t('common:PhoneMustBeAtMost15Characters'))
        .matches(/^[0-9]+$/, t('common:PhoneMustBeNumeric')),
    address_line_1: Yup.string()
        .required(t('common:AddressLine1IsRequired'))
        .min(2, t('common:AddressLine1MustBeAtLeast2Characters')),
    street: Yup.string()
        .required(t('common:StreetIsRequired'))
        .min(2, t('common:StreetMustBeAtLeast2Characters')),
    city: Yup.string()
        .required(t('common:CityIsRequired'))
        .min(2, t('common:CityMustBeAtLeast2Characters'))
        .matches(/^[a-zA-Z]+$/, t('common:CityMustBeAlphabetical')),
    zip_code: Yup.string()
        .required(t('common:ZipCodeIsRequired'))
        .min(2, t('common:ZipCodeMustBeAtLeast2Characters'))
        .matches(/^[0-9]+$/, t('common:ZipCodeMustBeNumeric')),
    country: Yup.string()
        .required(t('common:CountryIsRequired')),
    terms_conditions: Yup.bool()
        .oneOf([true], t('common:YouMustAcceptTermsAndConditions')),
    terms_conditions_1: Yup.bool()
        .oneOf([true], t('common:YouMustAcceptTermsAndConditions')),


}).strict();






const BookingScreen = ({ route }) => {
    const { userInfo } = useContext(AuthContext);
    const slug = route.params.slug;
    const location = route.params.location;
    const city = route.params.city;
    const country = route.params.country;
    const street_name = route.params.street_name;
    const name = route.params.name;
    const examDate = route.params.examDate;
    const examTime = route.params.examTime;
    const price = route.params.price;
    const event_id = route.params.id;
    const [birth_date, setBirthdate] = React.useState(new Date());
    const [country_of_birth, setCountryOfBirth] = React.useState('');
    const [mother_tongue, setMotherTongue] = React.useState('');
    const [co, setCo] = React.useState('');
    const [id_proof, setIdProof] = React.useState('');
    const [payment_gateway, setPaymentGateway] = React.useState('');
    const [terms_conditions_1, setTermsConditions1] = React.useState('');
    const [terms_conditions, setTermsConditions] = React.useState('');

    //birthdate
    const [show, setShow] = useState(false);
    const [mode, setMode] = useState('date');
    const [date, setDate] = useState(new Date());


    const onChange = (event, selectedDate) => {
        const currentDate = selectedDate || date;
        setShow(Platform.OS === 'ios');
        setDate(currentDate);
        setBirthdate(currentDate);
    }

    const showMode = (currentMode) => {
        setShow(true);
        setMode(currentMode);
    }

    const book = (salutation, academic_title, first_name, last_name, email, identification_number, country_of_birth, mother_tongue, telephone, phone, address_line_1, street, city, zip_code, country, terms_conditions, terms_conditions_1) => {
        axios.post(`${BASE_URL}/register-exam`, {
            salutation: salutation,
            academic_title: academic_title,
            first_name: first_name,
            last_name: last_name,
            email: email,
            identification_number: identification_number,
            country_of_birth: country_of_birth,
            mother_tongue: mother_tongue,
            telephone: telephone,
            phone: phone,
            address_line_1: address_line_1,
            street: street,
            city: city,
            zip_code: zip_code,
            country: country,
            terms_conditions: terms_conditions,
            terms_conditions_1: terms_conditions_1,
            event_id: event_id,
            birth_date: birth_date,
            id_proof: id_proof,
            payment_gateway: payment_gateway,
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                Authorization: 'Bearer ' + userInfo.token,
            }
        }).then((response) => {
            if (response.data.status === 'success') {
                Alert.alert(t('common:Success'), t('common:YourBookingHasBeenSuccessfullySubmitted'), [{
                    text: t('common:OK'),
                    onPress: () => {
                        navigation.navigate('Home');
                    }
                }]);
            } else {
                Alert.alert(t('common:Error'), t('common:YourBookingHasNotBeenSuccessfullySubmitted'), [{
                    text: t('common:OK'),
                    onPress: () => {
                        navigation.navigate('Home');
                    }
                }]);
            }
        }).catch((error) => {
            console.log(error);
        });
    }


    return (
        <View style={styles.container}>
            <ScrollView>
                <View style={styles.header}>
                    <ImageBackground source={require('../assets/searchBackground.png')}>
                        <Text style={styles.h1}>{slug} {t('common:Level')}</Text>
                        {location != null ?
                            <View style={{ flexDirection: 'row', marginTop: 15, marginBottom: 15 }}>
                                <Text style={{ marginRight: 10, marginLeft: 5, }}>
                                    <Entypo
                                        name="location-pin"
                                        size={18}
                                        color="#fff"
                                        style={styles.icon}
                                    />
                                </Text>
                                <Text style={styles.locationText}>
                                    {location.name} - {city}/ {location.street_name}
                                </Text>
                            </View> : <View View style={{ flexDirection: 'column', marginTop: 15, marginBottom: 15 }}>
                                <Text style={{ marginRight: 5, marginLeft: 5, }}>
                                    <Entypo
                                        name="location-pin"
                                        size={18}
                                        color="#000"
                                        style={styles.icon}
                                    />
                                </Text>
                            </View>}
                    </ImageBackground>
                </View>
                <View style={styles.search}>
                    <View style={{ flexDirection: 'column', marginTop: 10, marginBottom: 2 }}>

                        <Text style={styles.title}> {t('common:ExamLevel')}: </Text>
                        <Text style={[styles.value]}> {slug} </Text>

                    </View>
                    <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>

                        <Text style={styles.title}> {t('common:ExamDate')}:   </Text>
                        <Text style={[styles.value]}> {examDate} </Text>


                    </View>
                    <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 10 }}>
                        <Text style={styles.title}> {t('common:ExamTime')}:   </Text>
                        <Text style={[styles.value]}> {examTime} </Text>

                    </View>
                    <View style={{ flexDirection: 'column', marginTop: 10, marginBottom: 2 }}>
                        <Text style={styles.title}> {t('common:ExaminationFee')}:   </Text>
                        <Text style={[styles.value]}> {price} € </Text>

                    </View>
                    <View style={{ flexDirection: 'column', marginTop: 20, marginBottom: 2 }}>
                        <Text style={{
                            fontSize: 22,
                            color: '#1a6997',
                            fontWeight: 'bold',
                            marginLeft: 10,
                        }}> {t('common:Total')}:   </Text>
                        <Text style={{
                            fontSize: 20,
                            fontWeight: 'bold',
                            color: '#000',
                            // marginHorizontal: 10,
                            paddingTop: 5,
                            textAlign: 'right',
                            flex: 1,
                            marginRight: 7,
                        }}> {price} € </Text>

                    </View>
                </View>
                <View style={{ marginTop: 50, marginBottom: 10, backgroundColor: '#fff', width: '90%', marginLeft: '5%' }}>
                    <Text style={styles.descriptionLabel}>{t('common:BookingSubmission')}</Text>
                    <Text style={styles.titleHeader}>{t('common:ContactInformation')}</Text>

                    <Formik
                        initialValues={{
                            salutation: '',
                            academic_title: '',
                            first_name: '',
                            last_name: '',
                            email: '',
                            identification_number: '',
                            country_of_birth: '',
                            mother_tongue: '',
                            telephone: '',
                            phone: '',
                            address_line_1: '',
                            street: '',
                            city: '',
                            zip_code: '',
                            country: '',
                            birth_date: '',
                            terms_conditions: false,
                            terms_conditions_1: false,
                        }}
                        onSubmit={(values, actions) => {
                            actions.resetForm();
                            console.log(values);
                            setTimeout(() => {
                                alert(JSON.stringify(values, null, 2));
                            }, 400);
                        }}
                        validationSchema={validationSchema}
                    >
                        {({ handleChange, handleBlur, handleSubmit, values, errors, touched, setFieldValue, setFieldTouched, isValid }) => (
                            <View style={{ marginTop: 10, marginBottom: 10 }}>
                                <View style={styles.name}>
                                    <TextInput
                                        style={{
                                            marginBottom: 12,
                                            borderWidth: 1,
                                            borderColor: '#bbb',
                                            borderRadius: 5,
                                            paddingVertical: 10,
                                            paddingHorizontal: 14,
                                            width: '45%',
                                            color: '#000',
                                            marginLeft: 5
                                        }}
                                        placeholder={t('common:FirstName')}
                                        placeholderTextColor='#9c9c9c'
                                        onChangeText={handleChange('first_name')}
                                        onBlur={handleBlur('first_name')}
                                        value={values.first_name}
                                    />
                                    <TextInput
                                        style={{
                                            marginLeft: '6%',
                                            marginBottom: 12,
                                            borderWidth: 1,
                                            borderColor: '#bbb',
                                            borderRadius: 5,
                                            paddingVertical: 10,
                                            paddingHorizontal: 14,
                                            width: '45%',
                                            color: '#000',
                                            marginRight: 5
                                        }}
                                        placeholder={t('common:LastName')}
                                        placeholderTextColor='#9c9c9c'
                                        onChangeText={handleChange('last_name')}
                                        onBlur={handleBlur('last_name')}
                                        value={values.last_name}
                                    />

                                </View>
                                {touched.first_name && errors.first_name && <Text style={styles.error}>{errors.first_name}</Text>}
                                {touched.last_name && errors.last_name && <Text style={styles.error}>{errors.last_name}</Text>}

                                <Text style={styles.title}> {t('common:Email')}:   </Text>
                                <TextInput
                                    style={styles.input}
                                    placeholder={t('common:Email')}
                                    placeholderTextColor='#9c9c9c'
                                    onChangeText={handleChange('email')}
                                    onBlur={handleBlur('email')}
                                    value={values.email}
                                    keyboardType='email-address'
                                />
                                {touched.email && errors.email && <Text style={styles.error}>{errors.email}</Text>}

                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:IdentificationNumber')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('identification_number')}
                                        onBlur={handleBlur('identification_number')}
                                        value={values.identification_number}
                                    />
                                    {errors.identification_number && touched.identification_number ? (
                                        <Text style={styles.error}>{errors.identification_number}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:BirthDate')}:   </Text>
                                    <TouchableOpacity onPress={() => showMode('date')}>
                                        <Text style={[styles.input, { fontSize: RFPercentage(2.7), color: '#000', marginTop: 10 }]}>{moment(birth_date).format('DD/MM/YYYY')}</Text>
                                    </TouchableOpacity>
                                    {show && (
                                        <DateTimePicker
                                            testID="dateTimePicker"
                                            timeZoneOffsetInMinutes={0}
                                            value={date}
                                            mode={mode}
                                            is24Hour={true}
                                            display="calendar"
                                            onChange={onChange}
                                        />
                                    )}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:BirthPlace')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('country_of_birth')}
                                        onBlur={handleBlur('country_of_birth')}
                                        value={values.country_of_birth}
                                    />
                                    {errors.country_of_birth && touched.country_of_birth ? (
                                        <Text style={styles.error}>{errors.country_of_birth}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:MotherTongue')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('mother_tongue')}
                                        onBlur={handleBlur('mother_tongue')}
                                        value={values.mother_tongue}
                                    />
                                    {errors.mother_tongue && touched.mother_tongue ? (
                                        <Text style={styles.error}>{errors.mother_tongue}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:Telephone')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('telephone')}
                                        onBlur={handleBlur('telephone')}
                                        value={values.telephone}
                                    />
                                    {errors.telephone && touched.telephone ? (
                                        <Text style={styles.error}>{errors.telephone}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:Phone')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('phone')}
                                        onBlur={handleBlur('phone')}
                                        value={values.phone}
                                    />
                                    {errors.phone && touched.phone ? (
                                        <Text style={styles.error}>{errors.phone}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:AddressLine1')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('address_line_1')}
                                        onBlur={handleBlur('address_line_1')}
                                        value={values.address_line_1}
                                    />
                                    {errors.address_line_1 && touched.address_line_1 ? (
                                        <Text style={styles.error}>{errors.address_line_1}</Text>
                                    ) : null}
                                </View>
                                <View style={{ flexDirection: 'column', marginTop: 2, marginBottom: 2 }}>
                                    <Text style={styles.title}> {t('common:Street')}:   </Text>
                                    <TextInput
                                        style={[styles.input, { flex: 1, marginRight: 10 }]}
                                        onChangeText={handleChange('street')}
                                        onBlur={handleBlur('street')}
                                        value={values.street}
                                    />
                                    {errors.street && touched.street ? (
                                        <Text style={styles.error}>{errors.street}</Text>
                                    ) : null}
                                </View>
                            </View>
                        )}
                    </Formik>

                </View>

            </ScrollView>
            <View style={styles.submit}>
                <Text style={{
                    flex: 0.4,
                    fontSize: 16,
                    justifyContent: 'center',
                    alignSelf: 'center',
                    marginLeft: 30,

                }}>{t('common:Fee')} </Text>
                <Text style={{
                    flex: 0.6,
                    fontSize: 24,
                    fontWeight: 'bold',
                    justifyContent: 'center',
                    alignSelf: 'center',
                    marginRight: 10,
                    color: '#1a6997'

                }}
                >
                    {/* {price} */}
                    € </Text>
                <TouchableOpacity style={{ alignSelf: 'flex-end', justifyContent: 'flex-end', marginRight: 20 }}
                    onPress={() => {

                    }
                    }>
                    <Text style={styles.submitLabel}>{t('common:PayNow')}</Text>
                </TouchableOpacity>
            </View>
        </View>
    )
}

export default BookingScreen

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#efefef',
    },
    header: {
        flex: 1,
        backgroundColor: '#1a6997',
        height: 200,
    },
    h1: {
        fontSize: 25,
        color: '#fff',
        marginHorizontal: 10,
        paddingTop: 12,
    },
    h5: {
        fontSize: 16,
        color: '#fff',
        marginHorizontal: 20,
        paddingTop: 5,
        lineHeight: 20,
    },
    search: {
        width: '94%',
        height: 240,
        // borderWidth: 0.5,
        borderRadius: 5,
        padding: 10,
        margin: 10,
        elevation: 1,
        backgroundColor: '#fff',
        marginTop: -90,
        zindex: -1,
    },
    title: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#000',
        marginHorizontal: 10,
        paddingTop: 5,
    },
    titleHeader: {
        fontSize: 13,
        color: '#1a6997',
        marginHorizontal: 10,
        paddingTop: 5,
        paddingBottom: 5,
    },
    button: {
        backgroundColor: '#1a6997',
        padding: 10,
        margin: 10,
        borderRadius: 5,
        elevation: 1,
        width: 150,
        height: 50,
        alignItems: 'center',
        justifyContent: 'center',
        marginTop: -50,
        zindex: -1,
    },
    buttonText: {
        color: '#fff',
        fontSize: 18,
        fontWeight: 'bold',
    },
    list: {
        width: '94%',
        marginTop: 10,
        marginLeft: 10,
        marginRight: 10,
        backgroundColor: '#fff',
        borderRadius: 5,
        paddingVertical: 10,
        elevation: 1,
    },
    listTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        color: '#1a6997',
        marginHorizontal: 10,
        paddingTop: 5,
    },
    listSubTitle: {
        fontSize: 16,
        color: '#000',
        marginHorizontal: 10,
        paddingTop: 5,
        marginBottom: 10,
    },
    locationText: {
        fontSize: 15,
        color: "#fff",
        width: '70%',
        fontWeight: '400',
        marginRight: '4%',
    },
    submit: {
        alignSelf: 'flex-end',
        backgroundColor: '#fff',
        width: '100%',
        flexDirection: 'row'
    },
    submitLabel: {
        fontSize: 18,
        marginTop: '2%',
        marginBottom: '2%',
        color: '#fff',
        borderColor: '#1a6997',
        backgroundColor: '#1a6997',
        borderWidth: 2,
        paddingHorizontal: '15%',
        paddingVertical: '2%',
        borderRadius: 4,
        alignSelf: 'center',
        justifyContent: 'center',
    },
    value: {
        fontSize: 15,
        fontWeight: '500',
        color: '#000',
        // marginHorizontal: 10,
        paddingTop: 5,
        textAlign: 'right',
        flex: 1,
        marginRight: 7,
    },
    descriptionLabel: {
        fontSize: 22,
        fontWeight: 'bold',
        color: '#1a6997',
        marginHorizontal: 15,
        paddingTop: 20,
    },
    titleHeader: {
        fontSize: 19,
        fontWeight: 'bold',
        color: '#000',
        marginHorizontal: 15,
        paddingTop: 20,
        paddingBottom: 10,
    },
    input: {
        marginBottom: 12,
        borderWidth: 1,
        borderColor: '#bbb',
        borderRadius: 5,
        paddingVertical: 10,
        paddingHorizontal: 14,
        color: '#000',
        marginHorizontal: 5
    },
    name: {
        flexDirection: 'row',
    }
})
///

import { StyleSheet, Text, View } from 'react-native';
import axios from 'axios';
import React, { useEffect, useState, useContext } from 'react';
import { BASE_URL } from '../config';
import { AuthContext } from '../context/AuthContext';
import { decode as atob, encode as btoa } from 'base-64';


const PaypalScreen = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [accessToken, setAccessToken] = useState('');
    const { userInfo } = useContext(AuthContext);
    const token = 'A21AAImprcpogIAcaBbtcw3v5rrFy8-yC7pB64QgD6GW6x-ygJTqDdppTtP3iWojMt9f6-KBgN8xc_rQX8PDU-R6OhM44oc6w';
    const getData = async () => {
        const { data } = await axios
            .get(`${BASE_URL}/paypalKeys`, {
                headers: {
                    Authorization: 'Bearer ' + userInfo.token,
                },
            });
        setUsername(data.clientId);
        setPassword(data.clientSecret);
        console.log(data);
    };
    useEffect(() => {
        getData();
    }, [])

    // const getAccessToken = async () => {
    //     const { data } = await axios
    //         .post('https://api.sandbox.paypal.com/v1/oauth2/token', {
    //             grant_type: 'client_credentials',
    //         }, {
    //             headers: {
    //                 'Content-Type': 'application/x-www-form-urlencoded',
    //                 Authorization: 'Bearer ' + token,
    //             },
    //         }).then((response) => {
    //             console.log(response.data.access_token);
    //             setAccessToken(response.data.access_token);
    //         }).catch((error) => {
    //             console.log(error);
    //         }
    //         );

    // };
    // useEffect(() => {
    //     getAccessToken();
    // }, [token])

    const getPayment = async () => {
        const { data } = await axios
            .post('https://api.sandbox.paypal.com/v1/payments/payment/', {
                intent: 'sale',
                payer: {
                    payment_method: 'paypal',
                },
                transactions: [
                    {
                        amount: {
                            total: '7.47',
                            currency: 'USD',
                            details: {
                                subtotal: '7.41',
                                tax: '0.03',
                                shipping: '0.03',
                            },
                        },
                        description: 'This is the payment transaction description.',
                        custom: 'EBAY_EMS_90048630024435',
                        invoice_number: '48787589673',
                        payment_options: {
                            allowed_payment_method: 'INSTANT_FUNDING_SOURCE',
                        },
                        soft_descriptor: 'ECHI5786786',
                        item_list: {
                            items: [
                                {
                                    name: 'hat',
                                    description: 'Brown hat.',
                                    quantity: '5',
                                    price: '3',
                                    tax: '0.01',
                                    sku: '1',
                                    currency: 'USD',
                                },
                                {
                                    name: 'handbag',
                                    description: 'Black handbag.',
                                    quantity: '1',
                                    price: '15',
                                    tax: '0.02',
                                    sku: 'product34',
                                    currency: 'USD',
                                },
                            ],
                            shipping_address: {
                                recipient_name: 'Brian Robinson',
                                line1: '4th Floor',
                                line2: 'Unit #34',
                                city: 'San Jose',
                                country_code: 'US',
                                postal_code: '95131',
                                phone: '011862212345678',
                                state: 'CA',
                            },
                        },
                    },
                ],
                note_to_payer: 'Contact us for any questions on your order.',
                redirect_urls: {
                    return_url: 'http://www.example.com/your_redirect_url.html',
                    cancel_url: 'http://www.example.com/your_cancel_url.html',
                },
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: 'Bearer ' + token,
                },
            }).then((response) => {
                console.log(response.data);
            }).catch((error) => {
                console.log('here', error);
            }
            );

    }
    useEffect(() => {
        getPayment();
    }, [token])

    return (
        <View>
            <Text>PaypalScreen</Text>
        </View>
    )
}

export default PaypalScreen

const styles = StyleSheet.create({})
// import React, { Component } from 'react'
// import {
//     View,
//     WebView,
//     ActivityIndicator
// } from 'react-native'
// import axios from 'axios'
// import { BASE_URL } from '../config';
// import { AuthContext } from '../context/AuthContext';
// import { decode as atob, encode as btoa } from 'base-64'

// export default class PaypalScreen extends Component {

//     state = {
//         username: null,
//         password: null,
//         accessToken: null,
//         approvalUrl: null,
//         paymentId: null,
//         token: 'A21AAImprcpogIAcaBbtcw3v5rrFy8-yC7pB64QgD6GW6x-ygJTqDdppTtP3iWojMt9f6-KBgN8xc_rQX8PDU-R6OhM44oc6w'
//     }

//     componentDidMount() {

//         axios.get
//             (`${BASE_URL}/paypalKeys`, {
//             })
//             .then(res => {
//                 this.setState({
//                     username: res.data.clientId,
//                     password: res.data.clientSecret
//                 })
//                 console.log(res.data)
//             })
//         let currency = '100 USD'
//         currency.replace(" USD", "")

//         const dataDetail = {
//             "intent": "sale",
//             "payer": {
//                 "payment_method": "paypal"
//             },
//             "transactions": [{
//                 "amount": {
//                     "total": currency,
//                     "currency": "THB",
//                     "details": {
//                         "subtotal": currency,
//                         "tax": "0",
//                         "shipping": "0",
//                         "handling_fee": "0",
//                         "shipping_discount": "0",
//                         "insurance": "0"
//                     }
//                 }

//             }],
//             "redirect_urls": {
//                 "return_url": "https://example.com",
//                 "cancel_url": "https://example.com"
//             }
//         }

//         axios.post('https://api.sandbox.paypal.com/v1/oauth2/token', {
//             grant_type: 'client_credentials'
//         },
//             {
//                 headers: {
//                     'Content-Type': 'application/x-www-form-urlencoded',
//                     Authorization: 'Bearer ' + this.state.token
//                 }
//             }
//         )
//             .then(response => {
//                 this.setState({
//                     accessToken: response.data.access_token
//                 })
//                 console.log(response.data.access_token)

//                 axios.post('https://api.sandbox.paypal.com/v1/payments/payment', dataDetail,
//                     {
//                         headers: {
//                             'Content-Type': 'application/json',
//                             Authorization: 'Bearer ' + this.state.token
//                         }
//                     }
//                 )
//                     .then(response => {

//                         const { id, links } = response.data
//                         const approvalUrl = links.find(data => data.rel == "approval_url")

//                         this.setState({
//                             paymentId: id,
//                             approvalUrl: approvalUrl.href
//                         })
//                     }).catch(err => {
//                         console.log(err)
//                     })
//             })
//             .catch(err => {
//                 console.log(err)
//             })

//     }

//     _onNavigationStateChange = (webViewState) => {

//         if (webViewState.url.includes('https://example.com/')) {

//             this.setState({
//                 approvalUrl: null
//             })

//             const { PayerID, paymentId } = webViewState.url

//             axios.post(`https://api.sandbox.paypal.com/v1/payments/payment/${paymentId}/execute`, { payer_id: PayerID },
//                 {
//                     headers: {
//                         'Content-Type': 'application/json',
//                         'Authorization': `Bearer ${this.state.accessToken}`
//                     }
//                 }
//             )
//                 .then(response => {
//                     console.log(response)

//                 }).catch(err => {
//                     console.log({ ...err })
//                 })

//         }
//     }

//     render() {

//         const { approvalUrl } = this.state
//         return (
//             <View style={{ flex: 1 }}>
//                 {
//                     approvalUrl ? <WebView
//                         style={{ height: 400, width: 300 }}
//                         source={{ uri: approvalUrl }}
//                         onNavigationStateChange={this._onNavigationStateChange}
//                         javaScriptEnabled={true}
//                         domStorageEnabled={true}
//                         startInLoadingState={false}
//                         style={{ marginTop: 20 }}
//                     /> : <ActivityIndicator />
//                 }
//             </View>
//         )
//     }
// }

import React, { Component } from 'react'
import {
    View,
    ActivityIndicator
} from 'react-native'
import axios from 'axios';
import { BASE_URL } from '../config';
import { WebView } from 'react-native-webview';

export default class Paypal extends Component {

    state = {
        accessToken: null,
        approvalUrl: null,
        paymentId: null
    }

    componentDidMount() {
        let currency = '100 USD'
        currency.replace(" USD", "")

        const dataDetail = {
            "intent": "sale",
            "payer": {
                "payment_method": "paypal"
            },
            "transactions": [{
                "amount": {
                    "total": 100,
                    "currency": "USD"
                }

            }],
            "redirect_urls": {
                "return_url": "https://example.com",
                "cancel_url": "https://example.com"
            }
        }
        axios.get(`${BASE_URL}accessToken`)
            .then(res => {
                console.log(res.data)
                this.setState({ accessToken: res.data })
            }).catch(err => {
                console.log(err)
            })

        // axios.post("https://api.sandbox.paypal.com/v1/oauth2/token", { grant_type: 'client_credentials' },
        //     {
        //         headers: {
        //             'Content-Type': 'application/x-www-form-urlencoded',
        //             Authorization: `Bearer A21AAKStCWBt5Igl5L9I0Dyc_OGLbJM5MeRPGTSBojFETKLhpH1UqWQzoTTIcStpp2Zz-HsUZt8MV_oQOYjFex4OZt1p7Waow`
        //         }
        //     }
        // )
        //     .then(response => {
        //         this.setState({
        //             accessToken: response.data.access_token
        //         })

        axios.post('https://api.sandbox.paypal.com/v1/payments/payment', dataDetail,
            {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer A21AAKStCWBt5Igl5L9I0Dyc_OGLbJM5MeRPGTSBojFETKLhpH1UqWQzoTTIcStpp2Zz-HsUZt8MV_oQOYjFex4OZt1p7Waow`
                }
            }
        )
            .then(response => {

                const { id, links } = response.data
                const approvalUrl = links.find(data => data.rel == "approval_url")

                this.setState({
                    paymentId: id,
                    approvalUrl: approvalUrl.href
                })
            }).catch(err => {
                console.log('there', err.response)
            })
        // }).catch(err => {
        //     console.log('here', err)
        // })

    }

    _onNavigationStateChange = (webViewState) => {

        if (webViewState.url.includes('https://example.com/')) {

            this.setState({
                approvalUrl: null
            })

            const { PayerID, paymentId } = webViewState.url

            axios.post(`https://api.sandbox.paypal.com/v1/payments/payment/${paymentId}/execute`, { payer_id: PayerID },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer A21AAKStCWBt5Igl5L9I0Dyc_OGLbJM5MeRPGTSBojFETKLhpH1UqWQzoTTIcStpp2Zz-HsUZt8MV_oQOYjFex4OZt1p7Waow`
                    }
                }
            )
                .then(response => {
                    console.log(response)

                }).catch(err => {
                    console.log(err)
                })

        }
    }

    render() {

        const { approvalUrl } = this.state
        return (
            <View style={{ flex: 1 }}>
                {
                    approvalUrl ? <WebView
                        style={{ height: 400, width: 300 }}
                        source={{ uri: approvalUrl }}
                        onNavigationStateChange={this._onNavigationStateChange}
                        javaScriptEnabled={true}
                        domStorageEnabled={true}
                        startInLoadingState={false}
                        style={{ marginTop: 20 }}
                    /> : <ActivityIndicator />
                }
            </View>
        )
    }
}
